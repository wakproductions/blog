<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-09-12T04:24:00-04:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Graylog + Apache + Docker, Using GELF</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/12/graylog-apache-docker-using-gelf.html"/>
    <id>http://blog.url.com/2016/09/12/graylog-apache-docker-using-gelf.html</id>
    <published>2016-09-12T04:24:00-04:00</published>
    <updated>2016-09-12T08:23:16-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Objective&lt;/strong&gt;: Configure a Graylog server to accept GELF-formatted logs from an Apache web server. Both servers
will be running on Docker, although we will adapt the Apache Docker setup instructions to set up an existing
(non-Docker) Apache server running on Ubuntu 14.04. The logs are going to be sent to the Graylog server using
UDP port 12201.&lt;/p&gt;

&lt;h3&gt;Docker Setup&lt;/h3&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;version: &amp;#39;2&amp;#39;
services:
  apache:
    depends_on:
      - graylog
    image: &amp;quot;wakproductions/apache2-graylog-config&amp;quot;
    volumes:
      - ~/Development/graylog-local/install-demos/apache2/etc/apache2/mods-enabled/log_gelf.conf:/etc/apache2/mods-enabled/log_gelf.conf
    ports:
      - &amp;quot;3000:80&amp;quot;
  mongo:
    image: &amp;quot;mongo:3&amp;quot;
    volumes:
      - ~/Development/graylog-local/data/mongo:/data/db
  elasticsearch:
    image: &amp;quot;elasticsearch:2&amp;quot;
    command: &amp;quot;elasticsearch -Des.cluster.name=&amp;#39;graylog&amp;#39;&amp;quot;
    volumes:
      - ~/Development/graylog-local/data/elasticsearch:/usr/share/elasticsearch/data
  graylog:
    image: &amp;quot;graylog2/server&amp;quot;
    volumes:
      - ~/Development/graylog-local/data/journal:/usr/share/graylog/data/journal
      - ~/Development/graylog-local/config:/usr/share/graylog/data/config
    environment:
      # GRAYLOG_WEB_ENDPOINT_URI: &amp;quot;http://127.0.0.1:9000/api/&amp;quot; # didn&amp;#39;t like having this config here (tried looking for REST server at this address) - could be a bug
      GRAYLOG_REST_TRANSPORT_URI: &amp;quot;http://127.0.0.1:12900&amp;quot;
    depends_on:
      - mongo
      - elasticsearch
    ports:
      - &amp;quot;9000:9000&amp;quot;
      - &amp;quot;12900:12900&amp;quot;
      - &amp;quot;5555:5555&amp;quot;
      - &amp;quot;12201:12201/udp&amp;quot;
      - &amp;quot;12201:12201&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If using a preexisting Apache server, you could remove the &lt;code&gt;apache&lt;/code&gt; block and dependency from the file. You&amp;#39;ll just
have to mirror the image setup instructions below to get the GELF module installed on your Apache server.&lt;/p&gt;

&lt;h3&gt;Apache Docker Image Setup (wakproductions/apache2-graylog-config)&lt;/h3&gt;

&lt;p&gt;For Apache to submit GELF logs to Graylog, there is a community-supported module named &lt;a href="https://github.com/Graylog2/apache-mod_log_gelf"&gt;apache-mod_log_gelf&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM webdevops/apache:ubuntu-14.04

ENV WEB_DOCUMENT_INDEX index.html
ADD app /app

RUN apt-get update &amp;amp;&amp;amp; apt-get upgrade

RUN a2dismod mpm_event
RUN a2enmod mpm_prefork &amp;amp;&amp;amp; apt-get install libjson-c2 zlib1g

RUN wget https://github.com/Graylog2/apache-mod_log_gelf/releases/download/0.2.0/libapache2-mod-gelf_0.2.0-1_amd64.ubuntu.deb
RUN dpkg -i libapache2-mod-gelf_0.2.0-1_amd64.ubuntu.deb
RUN a2enmod log_gelf &amp;amp;&amp;amp; restart apache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GelfEnabled On
GelfUrl &amp;quot;udp://graylog:12201&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;/etc/apache2/mods-enabled/log_gelf.conf&lt;/strong&gt; &lt;a href="https://github.com/Graylog2/apache-mod_log_gelf#configuration"&gt;Reference&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Troubleshooting &lt;code&gt;docker build&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;ERROR: Module mpm_event is enabled - cannot proceed due to conflicts. It needs to be disabled first!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I found a clue to fixing this problem &lt;a href="http://askubuntu.com/questions/528866/apache-2-4-cannot-proceed-due-to-conflicts-with-module-mpm-prefork"&gt;here&lt;/a&gt;.
It was resolved by disabling &lt;code&gt;mpm_event&lt;/code&gt; via the command &lt;code&gt;a2dismod mpm_event&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dpkg: error processing archive libapache2-mod-gelf&lt;em&gt;0.1.0-1&lt;/em&gt;amd64.deb (--install):&lt;/strong&gt;
  &lt;strong&gt;cannot access archive: No such file or directory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The instructions on the apache-mod_log_gelf page were misleading. I overlooked the part that read: &amp;quot;Download a package
for your operating system from &lt;a href="https://github.com/Graylog2/apache-mod_log_gelf/releases"&gt;here&lt;/a&gt; Update Apache2 to the
latests version and use mpm_prefork.&amp;quot;&lt;/p&gt;

&lt;p&gt;To fix the error you have to follow that link and download the latest version of module into the working directory on
the Apache server. So I added the following line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RUN wget https://github.com/Graylog2/apache-mod_log_gelf/releases/download/0.2.0/libapache2-mod-gelf_0.2.0-1_amd64.ubuntu.deb&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Docker Networking Gotcha&lt;/h3&gt;

&lt;h4&gt;Getting the Apache server to see the Graylog server&lt;/h4&gt;

&lt;p&gt;It took me a while to figure out how to get the Apache server to talk to the Graylog server. Initially, I set the
&lt;code&gt;GelfUrl &amp;quot;udp:127.0.0.1:12201&amp;quot;&lt;/code&gt; but the Graylog server was not receiving anything. The problem was that this was the
equivalent to the Apache server trying to connect to itself on UDP 12201. You have to use the bridge network IP
address of the Graylog server, or refer to it by the network hostname assigned by the Docker network. Each
container has a hostname respective to the name you assign it in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;Useful Terminal Commands&lt;/h3&gt;

&lt;p&gt;Build Apache server image:
&lt;code&gt;docker build -t wakproductions/apache2-graylog-config .&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Sample Graylog Configuration&lt;/h3&gt;

&lt;div class="image-box"&gt;
  &lt;div class="image-box-content"&gt;
    &lt;a href="../../../images/2016/Pasted_Image_9_12_16__8_18_AM.png"&gt;&lt;img src="../../../images/2016/Pasted_Image_9_12_16__8_18_AM.png" alt="Pasted image 9 12 16  8 18 am" /&gt;&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Separate Github Pages + Organization Page + Domain Name on Middleman</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/11/github-pages-organization-page-domain-name-on-middleman.html"/>
    <id>http://blog.url.com/2016/09/11/github-pages-organization-page-domain-name-on-middleman.html</id>
    <published>2016-09-11T15:50:00-04:00</published>
    <updated>2016-09-11T16:54:03-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I have my primary website &lt;a href="http://www.winstonkotzan.com/"&gt;winstonkotzan.com&lt;/a&gt; set up as a Github Pages organization
page. The repo is &lt;a href="https://github.com/wakproductions/wakproductions.github.io"&gt;wakproductions.github.io&lt;/a&gt;. However,
to start this blog I decided to create a new Middleman repo to keep all the code separate from my base website
and give me more flexibility between managing the blog component and my other content. So I created a new
repo called &lt;a href="https://github.com/wakproductions/blog"&gt;blog&lt;/a&gt; which would host all the content in the folder
&lt;a href="http://www.winstonkotzan.com/blog"&gt;winstonkotzan.com/blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So Github pages have two different flavors. It&amp;#39;s got &lt;em&gt;organization&lt;/em&gt; pages and &lt;em&gt;project&lt;/em&gt; pages. The &lt;em&gt;organization&lt;/em&gt;
page goes to your root at &lt;em&gt;myusername.github.io&lt;/em&gt; while project pages show up at &lt;em&gt;myusername.github.io/project&lt;/em&gt;name&lt;em&gt;.
So basically my domain name winstonkotzan.com points to my _organization&lt;/em&gt; page and my blog is just a statically
generated &lt;em&gt;project&lt;/em&gt; page with the project name &amp;quot;blog&amp;quot;. One of the things I always found weird about how to upload
your static HTML pages is that the &lt;em&gt;organization&lt;/em&gt; page requires the static public web pages to be in the &lt;em&gt;master&lt;/em&gt;
github branch, but the &lt;em&gt;project&lt;/em&gt; pages require the static public web pages to be in a branch named &lt;em&gt;gh-pages&lt;/em&gt;.
It&amp;#39;s weird becuase for my &lt;em&gt;organization&lt;/em&gt; page I have to put all the source code in a branch called &lt;em&gt;source&lt;/em&gt;, whereas
most other repositories use &lt;em&gt;master&lt;/em&gt; for the main branch of source code. You can read the full docs on the 
differences between organization and project pages 
&lt;a href="https://help.github.com/articles/user-organization-and-project-pages/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Upon the first upload of my blog, I had this problem with the blog pages using the wrong style sheet. This is how my
website looked:&lt;/p&gt;

&lt;p&gt;&lt;img src="../../../images/2016/Screen_Shot_2016-09-11_at_3.01.42_PM.png" style="width: 700px" relative="true" alt="Screen shot 2016 09 11 at 3.01.42 pm" /&gt;&lt;/p&gt;

&lt;p&gt;I was able to fix the problem by using the relative links identifiers in the page template.&lt;/p&gt;

&lt;p&gt;&lt;img src="../../../images/2016/Pasted_Image_9_11_16__3_18_PM.png" style="width: 700px" relative="true" alt="Pasted image 9 11 16  3 18 pm" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Receiving 'error: src refspec gh-pages does not match any' on first publish with Middleman/middleman-gh-pages</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/11/middleman-middleman-gh-pages-first-publish-error-src-refspec-gh-pages-does-not-match-any.html"/>
    <id>http://blog.url.com/2016/09/11/middleman-middleman-gh-pages-first-publish-error-src-refspec-gh-pages-does-not-match-any.html</id>
    <published>2016-09-11T01:59:00-04:00</published>
    <updated>2016-09-11T14:59:44-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;ol&gt;
&lt;li&gt;Created blank repository for new blog website using Middleman, Github Pages, and the &lt;code&gt;middleman-gh-pages&lt;/code&gt; gem.&lt;/li&gt;
&lt;li&gt;Tried to upload my blog for the first time using the following sequence of commands and received the following error:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt; (master)$ git init
 (master)$ git add . 
 (master)$ git commit -m &amp;quot;Initial commit; first blog post&amp;quot; 
 (master)$ remote add origin git@github.com:wakproductions/blog.git 
 (master)$ rake publish  
cd /Users/wkotzan/Development/wakproductions-tech-blog
cd -
cd /Users/wkotzan/Development/wakproductions-tech-blog/build
git init
Initialized empty Git repository in /Users/wkotzan/Development/wakproductions-tech-blog/build/.git/
git remote add origin git@github.com:wakproductions/blog.git
git fetch --depth 1 origin gh-pages
fatal: Couldn&amp;#39;t find remote ref gh-pages
rake aborted!
Command failed with status (128): [git fetch --depth 1 origin gh-pages...]
/Users/wkotzan/.rvm/gems/ruby-2.3.0/gems/middleman-gh-pages-0.3.0/lib/middleman-gh-pages/tasks/gh-pages.rake:42:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#39;
/Users/wkotzan/.rvm/gems/ruby-2.3.0/gems/middleman-gh-pages-0.3.0/lib/middleman-gh-pages/tasks/gh-pages.rake:39:in `block in &amp;lt;top (required)&amp;gt;&amp;#39;
/Users/wkotzan/.rvm/gems/ruby-2.3.0/gems/rake-11.2.2/exe/rake:27:in `&amp;lt;top (required)&amp;gt;&amp;#39;
/Users/wkotzan/.rvm/gems/ruby-2.3.0/bin/ruby_executable_hooks:15:in `eval&amp;#39;
/Users/wkotzan/.rvm/gems/ruby-2.3.0/bin/ruby_executable_hooks:15:in `&amp;lt;main&amp;gt;&amp;#39;
Tasks: TOP =&amp;gt; publish =&amp;gt; sync_build_dir =&amp;gt; prepare_build_dir =&amp;gt; /Users/wkotzan/Development/wakproductions-tech-blog/build/.git/refs/remotes/origin/gh-pages
(See full trace by running task with --trace) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This error occurs because you need to have the gh-pages branch existing already. Fixed the error by creating the branch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; (master)$ git checkout -b gh-pages
Switched to a new branch &amp;#39;gh-pages&amp;#39;
 (gh-pages)$ git checkout master
Switched to branch &amp;#39;master&amp;#39;
 (master)$ rake publish

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The publish operation then worked.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>First Post</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/10/first-post.html"/>
    <id>http://blog.url.com/2016/09/10/first-post.html</id>
    <published>2016-09-10T02:11:00-04:00</published>
    <updated>2016-09-11T14:44:26-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Welcome to my blog, where I will be covering technical topics encountered in my work as a software engineer. This is
to act as a reference for myself, my team, and others who may be facing similar technical challenges. This won&amp;#39;t be a
traditional blog with static articles as I plan to retroactively update many of these posts. Think of it more as a
Wiki on technical topics.  &lt;/p&gt;
</content>
  </entry>
</feed>
