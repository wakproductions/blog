<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2017-06-18T01:00:00-04:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>How to test Devise Omniauth in your local development environment with Instagram</title>
    <link rel="alternate" href="http://blog.url.com/2017/06/18/testing-instagram-omniauth-devise-in-development.html"/>
    <id>http://blog.url.com/2017/06/18/testing-instagram-omniauth-devise-in-development.html</id>
    <published>2017-06-18T01:00:00-04:00</published>
    <updated>2017-06-18T17:13:20-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;For testing in your local environment, you can set the Omniauth redirect to a URL on your localhost. First, you have
to add localhost to your list of authorized hosts in your Omniauth settings:&lt;/p&gt;

&lt;p&gt;&lt;img src="../../../images/2016/Pasted_Image_6_18_17__4_57_PM.png" style="width: 600px" relative="true" alt="Pasted image 6 18 17  4 57 pm" /&gt;&lt;/p&gt;

&lt;p&gt;Then access the Oauth link to log into Instagram. You can do this by clicking a link in your browser set by
your Rails app running locally, or you can type the URL into your browser directly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.instagram.com/oauth/authorize?client_id=ce5d6048488346cc93010e9c170dd338&amp;amp;redirect_uri=http://localhost:5050/users/auth/instagram/callback&amp;amp;response_type=code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then log into your Instagram account and it will redirect you back to the application.&lt;/p&gt;

&lt;p&gt;&lt;img src="../../../images/2016/Pasted_Image_6_18_17__5_09_PM.png" style="width: 600px" relative="true" alt="Pasted image 6 18 17  5 09 pm" /&gt;&lt;/p&gt;

&lt;p&gt;Showing that the Devise callback URL is being hit by the browser with the access token from inside &lt;code&gt;rails s&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     2: def instagram
     3:   @user = User.from_omniauth(omniauth_data)
     4:
     5:   binding.pry
     6:
 =&amp;gt;  7:   if @user.access_token != omniauth_data.credentials.token
     8:     # This will be saved by the `sign_in_and_redirect` method below
     9:     @user.access_token = omniauth_data.credentials.token
    10:   end

[1] pry(#&amp;lt;Users::OmniauthCallbacksController&amp;gt;)&amp;gt; @user
=&amp;gt; #&amp;lt;User id: 1, uid: &amp;quot;300202775&amp;quot;, email: &amp;quot;&amp;quot;, created_at: &amp;quot;2017-06-18 19:25:50&amp;quot;, updated_at: &amp;quot;2017-06-18 19:25:50&amp;quot;, access_token: nil, first_name: &amp;quot;Winston&amp;quot;, last_name: &amp;quot;Kotzan&amp;quot;, middle_name: &amp;quot;&amp;quot;, time_zone: nil, provider: &amp;quot;instagram&amp;quot;&amp;gt;
[2] pry(#&amp;lt;Users::OmniauthCallbacksController&amp;gt;)&amp;gt; User.count
   (1.2ms)  SELECT COUNT(*) FROM &amp;quot;users&amp;quot;
=&amp;gt; 1
[4] pry(#&amp;lt;Users::OmniauthCallbacksController&amp;gt;)&amp;gt; omniauth_data
=&amp;gt; {&amp;quot;provider&amp;quot;=&amp;gt;&amp;quot;instagram&amp;quot;,
 &amp;quot;uid&amp;quot;=&amp;gt;&amp;quot;300202775&amp;quot;,
 &amp;quot;info&amp;quot;=&amp;gt;
  {&amp;quot;nickname&amp;quot;=&amp;gt;&amp;quot;wakproductions&amp;quot;,
   &amp;quot;name&amp;quot;=&amp;gt;&amp;quot;Winston Kotzan&amp;quot;,
   &amp;quot;email&amp;quot;=&amp;gt;nil,
   &amp;quot;image&amp;quot;=&amp;gt;&amp;quot;https://scontent.cdninstagram.com/t51.2885-19/11934657_1625722474367056_1293718021_a.jpg&amp;quot;,
   &amp;quot;bio&amp;quot;=&amp;gt;&amp;quot;&amp;quot;,
   &amp;quot;website&amp;quot;=&amp;gt;&amp;quot;&amp;quot;},
 &amp;quot;credentials&amp;quot;=&amp;gt;{&amp;quot;token&amp;quot;=&amp;gt;&amp;quot;300202775.ce5d604.417373f3e1e844478f2ddfae17dbe378&amp;quot;, &amp;quot;expires&amp;quot;=&amp;gt;false},
 &amp;quot;extra&amp;quot;=&amp;gt;
  {&amp;quot;raw_info&amp;quot;=&amp;gt;
    {&amp;quot;id&amp;quot;=&amp;gt;&amp;quot;300202775&amp;quot;,
     &amp;quot;username&amp;quot;=&amp;gt;&amp;quot;wakproductions&amp;quot;,
     &amp;quot;profile_picture&amp;quot;=&amp;gt;&amp;quot;https://scontent.cdninstagram.com/t51.2885-19/11934657_1625722474367056_1293718021_a.jpg&amp;quot;,
     &amp;quot;full_name&amp;quot;=&amp;gt;&amp;quot;Winston Kotzan&amp;quot;,
     &amp;quot;bio&amp;quot;=&amp;gt;&amp;quot;&amp;quot;,
     &amp;quot;website&amp;quot;=&amp;gt;&amp;quot;&amp;quot;}}}
[5] pry(#&amp;lt;Users::OmniauthCallbacksController&amp;gt;)&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>US Treasury Yield Curve Chart</title>
    <link rel="alternate" href="http://blog.url.com/2017/06/08/new-website-us-treasury-yield-curve.html"/>
    <id>http://blog.url.com/2017/06/08/new-website-us-treasury-yield-curve.html</id>
    <published>2017-06-08T01:00:00-04:00</published>
    <updated>2017-06-08T16:21:06-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Here&amp;#39;s a little project I did for fun to demonstrate a little Javascript single page app running on an
AWS/Docker/Ruby on Rails stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ustreasuryyieldcurve.com"&gt;US Treasury Yield Curve&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The term structure of interest rates are an important barometer for the economy. When the yield curve flattens
it&amp;#39;s often a good predictor of economic slowdown and subsequent decline in the stock market. Play around
with it and see what the interest rates have looked like historically!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Docker + Capistrano + Rails Errors! "The asset "application.css" is not present in the asset pipeline"</title>
    <link rel="alternate" href="http://blog.url.com/2017/06/06/docker-capistrano-asset-and-log-file-links.html"/>
    <id>http://blog.url.com/2017/06/06/docker-capistrano-asset-and-log-file-links.html</id>
    <published>2017-06-06T01:00:00-04:00</published>
    <updated>2017-06-06T15:00:43-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Upon getting my Docker application running in production, I ran into this error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;F, [2017-06-06T00:53:06.630911 #1] FATAL -- : [8957e40e-e8fa-4f2d-8072-4dab83c6269b] ActionView::Template::Error (The asset &amp;quot;application.css&amp;quot; is not present in the asset pipeline.):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem occurred because the Rails asset pipeline was missing files. The application in production mode couldn&amp;#39;t find
the files it was looking for from the &lt;code&gt;rake assets:precompile&lt;/code&gt; stage, which was performed by Capistrano &lt;em&gt;outside&lt;/em&gt; of the
Docker container. To fix this error I had to symlink the &lt;code&gt;public/assets&lt;/code&gt; folder inside of the Docker container to
the file system outside like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#docker-compose.yml

version: &amp;#39;3&amp;#39;
services:
  web:
    container_name: myapp
    build: .
    command: bundle exec rails s -p 3000
    environment:
      - RAILS_ENV=${RAILS_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - RAILS_SERVE_STATIC_FILES=${RAILS_SERVE_STATIC_FILES}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
    extra_hosts:
      - dbhost:${LOCAL_IP:-127.0.0.1}
    ports:
      - ${HTTP_PORT:-80}:3000
    tty: true
    volumes:
      - ./log:/app/log
      - ./public/assets:/app/public/assets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that on the &lt;code&gt;volumes&lt;/code&gt; section I link both the &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt; assets folder. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I Switched to Docker when Using AWS with Ruby on Rails</title>
    <link rel="alternate" href="http://blog.url.com/2017/06/03/why-I-use-docker-on-aws.html"/>
    <id>http://blog.url.com/2017/06/03/why-I-use-docker-on-aws.html</id>
    <published>2017-06-03T01:00:00-04:00</published>
    <updated>2017-06-03T13:53:40-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Why Do I Use Docker?&lt;/h2&gt;

&lt;p&gt;I am working on a Ruby on Rails app which will soon be up and running on AWS EC2. To my displeasure (as I&amp;#39;m more of an app
developer than DevOps guy), I ran into numerous configuration problems setting up my production server. When building
Ruby I ran into permissions problems with the gems such as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
ubuntu@ip-172-30-0-78:~$ gem install bundler
   Fetching: bundler-1.15.0.gem (100%)
   ERROR:  While executing gem ... (Gem::FilePermissionError)
       You don&amp;#39;t have write permissions for the /usr/local/lib/ruby/gems/2.4.0 directory.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Not to mention unforseen missing dependency problems such as this one when building the gemset:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gem Load Error is: Could not find a JavaScript runtime. See https://github.com/rails/execjs for a list of available runtimes.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could fiddle around for hours fixing these issues, but then what if I had to upgrade Ruby later on or add new
dependencies for new features? The last thing I would want is for my production system to go down due to unforeseen
differences between my development environment and production. Docker gives me a way to ensure consistency between
environments and swap dependencies. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Docker installation on AWS/Ubuntu Xenial made Easy with Ansible</title>
    <link rel="alternate" href="http://blog.url.com/2017/06/03/installing-docker-on-ubuntu-with-ansible.html"/>
    <id>http://blog.url.com/2017/06/03/installing-docker-on-ubuntu-with-ansible.html</id>
    <published>2017-06-03T01:00:00-04:00</published>
    <updated>2017-06-03T14:04:54-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Here is the Ansible role based &lt;a href="https://docs.docker.com/engine/installation/linux/ubuntu/#prerequisites"&gt;on the official Docker installation guide&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="yml"&gt;---
# This is aimed towards Ubuntu Xenial 16

- name: Uninstall Old Versions
  apt:
    pkg:          &amp;quot;{{ item }}&amp;quot;
    state:        absent
  with_items:
    - docker
    - docker-engine

- name: Install dependencies
  apt:
    pkg:          &amp;quot;{{ item }}&amp;quot;
    state:        present
    update_cache: true
  with_items:
    - apt-transport-https
    - ca-certificates
    - curl
    - software-properties-common

- name: Install the GPG key
  shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

- name: Add Docker repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
    state: present

- name: Install Docker
  apt:
    pkg:          docker-ce=17.03.0~ce-0~ubuntu-xenial
    state:        present
    update_cache: yes

- name: Install Docker compose
  shell: &amp;gt;
    curl -L https://github.com/docker/compose/releases/download/1.13.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose &amp;amp;&amp;amp;
    sudo chmod +x /usr/local/bin/docker-compose
  become: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://github.com/wakproductions/ansible-examples"&gt;See my full ansible examples repository for more&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to connect to an external Postgres database from a Docker container</title>
    <link rel="alternate" href="http://blog.url.com/2017/06/01/connecting-to-external-postgres-database-with-docker.html"/>
    <id>http://blog.url.com/2017/06/01/connecting-to-external-postgres-database-with-docker.html</id>
    <published>2017-06-01T01:00:00-04:00</published>
    <updated>2017-06-05T15:40:43-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;You would think something as simple as connecting to a database on the localhost would be a simple task in Docker. 
Unfortunately, accessing resources the local machine requires some special settings because of the obfuscation caused
by Docker&amp;#39;s virtual networking. To access the Postgres database on my local machine, I had to route around localhost
and connect to it via the machine&amp;#39;s local IP address. The local IP address I pass in using an environment variable
in the docker-compose file like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: &amp;#39;3&amp;#39;
services:
  web:
    container_name: myapplication
    build: .
    command: bundle exec rails s -p 3000
    environment:
      - DATABASE_URL=postgres://postgres:postgres@localhost:5432/myapplication
    extra_hosts:
      - localhost:${LOCAL_IP}
    ports:
      - 3030:3000
    tty: true

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my &lt;code&gt;.env&lt;/code&gt; file I populated &lt;code&gt;LOCAL_IP&lt;/code&gt; with my local IP address&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LOCAL_IP=192.168.1.143
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had to make the following change to the &lt;code&gt;listen_addresses&lt;/code&gt; part of my &lt;code&gt;postgresql.conf&lt;/code&gt; file in the Postgres data directory:
This enabled Postgres to bind to and listen in on connections coming through the local IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#------------------------------------------------------------------------------
# CONNECTIONS AND AUTHENTICATION
#------------------------------------------------------------------------------

# - Connection Settings -

# what IP address(es) to listen on;
listen_addresses = &amp;#39;localhost,192.168.1.143&amp;#39;
                                        # comma-separated list of addresses;
                                        # defaults to &amp;#39;localhost&amp;#39;; use &amp;#39;*&amp;#39; for all
                                        # (change requires restart)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above setting worked on my local Mac, but for my Ubuntu server, I had to implement the change using the
&lt;code&gt;ALTER SYSTEM&lt;/code&gt; command from within Postgres:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;postgres-# ALTER SYSTEM SET listen_addresses=&amp;#39;localhost,172.0.30.143&amp;#39;
ALTER SYSTEM
postgres-# \q

$ sudo service postgresql restart

$ netstat -ntl
  Active Internet connections (only servers)
  Proto Recv-Q Send-Q Local Address           Foreign Address         State      
  tcp        0      0 172.0.30.143:5432        0.0.0.0:*               LISTEN   &amp;lt;- it&amp;#39;s listening on the correct IP now   
  tcp        0      0 127.0.0.1:5432          0.0.0.0:*               LISTEN     
  tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     
  tcp6       0      0 :::3030                 :::*                    LISTEN     
  tcp6       0      0 :::22                   :::*                    LISTEN   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also had to add the following line to &lt;code&gt;pg_hba.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host    all             all             192.168.1.143/32        trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case you don&amp;#39;t know the Postgres data directory, log into psql and:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# show data_directory;

        data_directory        
------------------------------
 /var/lib/postgresql/9.5/main
(1 row)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Gotcha&lt;/h2&gt;

&lt;p&gt;On my Ubuntu configuration, I had trobule getting the pg&lt;em&gt;hba.conf to work. That&amp;#39;s because I created and edited the
file in the data directory. I found out that the real location of the pg&lt;/em&gt;hba.conf file was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;postgres-# SHOW hba_file;

               hba_file               
--------------------------------------
 /etc/postgresql/9.5/main/pg_hba.conf
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>
